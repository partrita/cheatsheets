#import "./templates/conf.typ": *

#show: template.with(
  title: "Helix 편집기 치트시트",
  header: [#datetime.today().display()],
  footer: "",
)

= 1. 기본 개념

Helix는 Vim과 유사한 텍스트 편집기이지만, Kakoune에서 영감을 받은 '선택 우선(selection-first)' 모델을 사용합니다.

- 전통적인 Vim: 동사-객체 (verb-object) 모델
- Helix: 객체-동사 (object-verb) 모델
- 먼저 선택(객체)을 하고, 그 다음 동작(동사)을 수행
- 모든 변경 사항을 미리 볼 수 있어 더 안전한 편집
- Tree-sitter를 통한 구문 하이라이팅
- Language Server Protocol (LSP) 내장 지원

= 2. 모드

== Normal 모드 (기본)
- 기본 모드, 모든 이동 및 조작 명령
- `Esc` 또는 `Ctrl-[`로 언제든지 돌아감
- 상태표시줄에 "NOR" 표시

== Insert 모드
- 텍스트 입력 모드
- 진입 방법:
  - `i`: 커서 앞에 삽입
  - `a`: 커서 뒤에 삽입
  - `I`: 줄의 시작에 삽입
  - `A`: 줄의 끝에 삽입
  - `o`: 아래에 새 줄 생성 후 삽입
  - `O`: 위에 새 줄 생성 후 삽입
  - 모드 종료는 `Esc`

== Select 모드
- 텍스트 선택 모드
- `v`로 진입, Normal 모드의 이동키로 선택 영역 확장
- 선택된 영역이 시각적으로 표시됨

= 3. OS별 키보드 차이점

== macOS
- Command 키는 대부분 사용되지 않음
- Option 키가 Alt 키 역할
- 시스템 클립보드 접근: `Space y` (복사), `Space p` (붙여넣기)
- 터미널에서 Option+문자로 특수 문자 입력 시 주의

== Linux
- Alt 키 사용이 표준
- X11 환경에서 `"*` 레지스터로 선택 영역 클립보드 접근
- Wayland에서는 `"+` 레지스터 사용
- 일부 터미널에서 Alt 조합키 설정 필요

== Windows
- Alt 키 일반적으로 잘 작동
- 시스템 클립보드는 `"+` 레지스터
- Windows Terminal에서 최적 성능
- PowerShell에서 유니코드 지원 확인 필요

= 4. 파일 및 프로그램 제어

== 기본 명령어
- `:q` 또는 `:quit`: 종료 (변경사항이 있으면 실패)
- `:q!` 또는 `:quit!`: 강제 종료
- `:w` 또는 `:write`: 저장
- `:wq` 또는 `:write-quit`: 저장 후 종료
- `:wa` 또는 `:write-all`: 모든 버퍼 저장
- `:qa` 또는 `:quit-all`: 모든 버퍼 종료
- `:o <파일명>` 또는 `:open`: 파일 열기
- `:h` 또는 `:help`: 도움말 열기
- `:reload`: 파일 다시 로드
- `:earlier <시간>`: 이전 상태로 되돌리기
- `:later <시간>`: 이후 상태로 되돌리기

== 설정 및 환경
- `:config-reload`: 설정 파일 다시 로드
- `:config-open`: 설정 파일 열기
- `:log-open`: 로그 파일 열기
- `:tutor`: 튜토리얼 시작
- `:theme <테마명>`: 테마 변경
- `:set <옵션> <값>`: 옵션 설정

= 5. 커서 이동

== 기본 이동
- `h`, `j`, `k`, `l`: 좌, 하, 상, 우 (방향키도 사용 가능)
- `w`: 다음 단어의 시작으로 이동
- `b`: 이전 단어의 시작으로 이동
- `e`: 현재 단어의 끝으로 이동
- `W`, `B`, `E`: 공백으로 구분된 단어 기준 이동

== 줄 내 이동
- `0`: 줄의 시작으로 이동
- `^`: 줄의 첫 번째 비공백 문자로 이동
- `$`: 줄의 끝으로 이동
- `f<문자>`: 줄에서 해당 문자로 이동 (앞으로)
- `F<문자>`: 줄에서 해당 문자로 이동 (뒤로)
- `t<문자>`: 해당 문자 전까지 이동 (앞으로)
- `T<문자>`: 해당 문자 전까지 이동 (뒤로)
- `;`: 마지막 f/F/t/T 명령 반복
- `,`: 마지막 f/F/t/T 명령 반대 방향 반복

== 파일 내 이동
- `gg`: 파일의 시작으로 이동
- `ge`: 파일의 끝으로 이동
- `<숫자>gg` 또는 `<숫자>G`: 특정 줄로 이동
- `%`: 매치되는 괄호로 이동
- `m<문자>`: 마크 설정
- `'<문자>`: 마크로 이동
- `''`: 이전 위치로 이동

== 화면 스크롤
- `Ctrl-u`: 반 페이지 위로 스크롤
- `Ctrl-d`: 반 페이지 아래로 스크롤
- `Ctrl-b`: 한 페이지 위로 스크롤
- `Ctrl-f`: 한 페이지 아래로 스크롤
- `z-z`: 현재 줄을 화면 중앙에 위치
- `z-t`: 현재 줄을 화면 위쪽에 위치
- `z-b`: 현재 줄을 화면 아래쪽에 위치

= 6. 선택 및 텍스트 객체

== 기본 선택
- `v`: 선택 모드 시작/토글
- `V`: 줄 단위 선택 모드
- `Ctrl-v`: 블록 선택 모드
- `x`: 현재 줄 전체 선택
- `X`: 현재 줄 (개행 문자 제외) 선택
- `;`: 선택 영역 뒤집기 (커서 위치 변경)
- `Alt-;`: 선택 영역을 하나의 커서로 축소

== 텍스트 객체 (i: inner, a: around)
- `iw`, `aw`: 단어 (word)
- `iW`, `aW`: 공백으로 구분된 단어 (WORD)
- `is`, `as`: 문장 (sentence)
- `ip`, `ap`: 문단 (paragraph)
- `i(`, `a(` 또는 `i)`, `a)`: 괄호 안 (parentheses)
- `i[`, `a[` 또는 `i]`, `a]`: 대괄호 안 (brackets)
- `i{`, `a{` 또는 `i}`, `a}`: 중괄호 안 (braces)
- `i<`, `a<` 또는 `i>`, `a>`: 꺾쇠괄호 안 (angle brackets)
- `i"`, `a"`: 쌍따옴표 안 (double quotes)
- `i'`, `a'`: 홑따옴표 안 (single quotes)
- `` i` ``, `` a` ``: 백틱 안 (backticks)

== 정규식 선택
- `s`: 정규식으로 선택 영역 분할
- `S`: 정규식으로 전체 줄 분할
- `Alt-s`: 선택 영역을 하나로 합치기
- `*`: 현재 선택 영역과 같은 텍스트 찾기
- `n`: 다음 검색 결과로 이동
- `N`: 이전 검색 결과로 이동

= 7. 편집 명령어

== 삭제
- `d`: 선택된 텍스트 삭제
- `Alt-d`: 선택된 텍스트 삭제 (레지스터에 저장하지 않음)
- `c`: 삭제 후 Insert 모드로 전환
- `Alt-c`: 삭제 후 Insert 모드 (레지스터에 저장하지 않음)
- `D`: 커서부터 줄 끝까지 삭제
- `C`: 커서부터 줄 끝까지 삭제 후 Insert 모드

== 복사 및 붙여넣기
- `y`: 선택된 텍스트 복사 (yank)
- `p`: 커서 뒤에 붙여넣기
- `P`: 커서 앞에 붙여넣기
- `R`: 선택된 텍스트를 레지스터 내용으로 교체
- `"<레지스터>y`: 특정 레지스터에 복사
- `"<레지스터>p`: 특정 레지스터에서 붙여넣기

== 변경 및 교체
- `r<문자>`: 선택된 문자를 다른 문자로 교체
- `~`: 대소문자 변경
- `` ` ``: 소문자로 변경
- `Alt-`` ` ``: 대문자로 변경
- `I`: 선택된 줄들의 시작에 Insert 모드
- `A`: 선택된 줄들의 끝에 Insert 모드
- `o`: 선택된 줄들 아래에 새 줄 생성
- `O`: 선택된 줄들 위에 새 줄 생성

== 들여쓰기 및 정렬
- `>`: 들여쓰기 증가
- `<`: 들여쓰기 감소
- `=`: 자동 들여쓰기
- `|`: 파이프 명령어 실행
- `Alt-|`: 각 선택 영역에 파이프 명령어 실행

== 실행 취소/재실행
- `u`: 실행 취소 (undo)
- `U`: 다시 실행 (redo)
- `.`: 마지막 변경 사항 반복
- `Alt-.`: 마지막 변경 사항 반대로 반복

= 8. 다중 커서 및 선택

== 다중 커서 생성
- `C`: 선택된 줄들의 끝에 커서 추가
- `Alt-C`: 선택된 줄들의 시작에 커서 추가
- `s`: 정규식으로 선택 영역을 여러 선택으로 분할
- `Alt-s`: 모든 선택을 하나로 합치기
- `&`: 선택 영역을 정렬 후 정렬된 순서대로 번호 매기기

== 선택 조작
- `;`: 모든 선택의 앵커와 헤드를 바꾸기
- `Alt-;`: 각 선택을 하나의 커서로 축소
- `,`: 다음 선택으로 이동
- `Alt-,`: 이전 선택으로 이동

== 검색 및 일치
- `*`: 현재 선택과 일치하는 다음 항목 선택에 추가
- `Alt-*`: 현재 선택과 일치하는 이전 항목 선택에 추가
- `/`: 앞으로 검색
- `?`: 뒤로 검색
- `n`: 다음 검색 결과
- `N`: 이전 검색 결과

= 9. Space 메뉴 (리더 키)

== 파일 작업
- `Space f`: 파일 피커 (현재 디렉토리)
- `Space F`: 파일 피커 (작업공간 전체)
- `Space b`: 버퍼 피커
- `Space a`: 코드 액션
- `Space "`: 레지스터 피커
- `Space /`: 전역 검색

== 이동 및 탐색
- `Space j`: 점프리스트 (forward)
- `Space k`: 점프리스트 (backward)
- `Space s`: 심볼 피커 (현재 버퍼)
- `Space S`: 워크스페이스 심볼 피커
- `Space g`: 진단 피커
- `Space G`: 모든 진단 피커

== 윈도우 및 버퍼
- `Space w`: 윈도우 메뉴
- `Space w w`: 다음 윈도우로 전환
- `Space w v`: 수직 분할
- `Space w s`: 수평 분할
- `Space w h/j/k/l`: 윈도우 간 이동
- `Space w c`: 윈도우 닫기
- `Space w o`: 현재 윈도우만 남기기

== 기타 유용한 기능
- `Space y`: 시스템 클립보드에 복사
- `Space p`: 시스템 클립보드에서 붙여넣기
- `Space R`: 시스템 클립보드 내용으로 교체
- `Space ?`: 키 바인딩 도움말
- `Space h`: 명령어 히스토리
- `Space r`: 이름 바꾸기 (LSP)

= 10. g 메뉴 (이동)

== LSP 기능
- `gd`: 정의로 이동 (go to definition)
- `gy`: 타입 정의로 이동 (go to type definition)
- `gr`: 참조 찾기 (go to references)
- `gi`: 구현으로 이동 (go to implementation)
- `ga`: 코드 액션 실행
- `gn`: 다음 진단으로 이동
- `gp`: 이전 진단으로 이동

== 기타 이동
- `gt`: 파일 상단으로 이동
- `gc`: 파일 중앙으로 이동
- `gb`: 파일 하단으로 이동
- `ge`: 파일 끝으로 이동
- `gh`: 줄 시작으로 이동
- `gl`: 줄 끝으로 이동
- `gs`: 줄 첫 번째 비공백 문자로 이동

= 11. z 메뉴 (뷰)

== 화면 위치 조정
- `zz` 또는 `z.`: 현재 줄을 화면 중앙에
- `zt`: 현재 줄을 화면 상단에
- `zb`: 현재 줄을 화면 하단에
- `zc`: 커서를 화면 중앙에

== 폴딩 (접기)
- `zo`: 접기 열기
- `zc`: 접기 닫기
- `za`: 접기 토글
- `zr`: 모든 접기 열기
- `zm`: 모든 접기 닫기

= 12. [ 및 ] 메뉴 (이전/다음)

== 이동
- `\]d`, `\[d`: 다음/이전 진단
- `]D`, `[D`: 마지막/첫 번째 진단
- `]f`, `[f`: 다음/이전 함수
- `]c`, `[c`: 다음/이전 클래스
- `]a`, `[a`: 다음/이전 인수
- `]o`, `[o`: 다음/이전 주석
- `]t`, `[t`: 다음/이전 테스트
- `]p`, `[p`: 다음/이전 문단
- `]space`, `[space`: 다음/이전 공백 줄 추가

= 13. 명령어 모드

== 검색 및 교체
- `:s/<패턴>/<교체>/`: 현재 선택에서 교체
- `:%s/<패턴>/<교체>/`: 전체 파일에서 교체
- 플래그:
  - `g`: 모든 일치 항목
  - `c`: 확인 후 교체
  - `i`: 대소문자 무시

== 파일 작업
- `:e <파일>`: 파일 편집
- `:w <파일>`: 다른 이름으로 저장
- `:r <파일>`: 파일 내용 삽입
- `:cd <디렉토리>`: 작업 디렉토리 변경
- `:pwd`: 현재 디렉토리 표시

== 버퍼 작업
- `:buffer <번호>`: 특정 버퍼로 이동
- `:bnext`, `:bprev`: 다음/이전 버퍼
- `:bdelete`: 버퍼 삭제
- `:buffers`: 모든 버퍼 목록

== 설정
- `:set <옵션>`: 옵션 활성화
- `:set no<옵션>`: 옵션 비활성화
- `:set <옵션>=<값>`: 옵션 값 설정
- `:set <옵션>?`: 옵션 값 확인

= 14. LSP 기능

== 코드 탐색
- `gd`: 정의로 이동
- `gr`: 참조 찾기
- `gi`: 구현으로 이동
- `gy`: 타입 정의로 이동
- `K`: 호버 정보 표시
- `Space k`: 시그니처 도움말

== 코드 수정
- `ga` 또는 `Space a`: 코드 액션
- `Space r`: 심볼 이름 바꾸기
- `=`: 코드 포맷팅
- `Space F`: 파일 포맷팅

== 진단
- `\]d`, `\[d`: 다음/이전 진단
- `]D`, `[D`: 마지막/첫 번째 진단
- `Space g`: 진단 피커
- `Space G`: 워크스페이스 진단 피커

= 15. 레지스터

== 사용법
- `"<문자>`: 레지스터 지정
- `"ay`: 'a' 레지스터에 복사
- `"ap`: 'a' 레지스터에서 붙여넣기
- `Space "`: 레지스터 피커 열기

== 특수 레지스터
- `""`: 기본 레지스터
- `"+`: 시스템 클립보드
- `"*`: 선택 영역 (X11)
- `"_`: 블랙홀 레지스터 (삭제 시 저장하지 않음)
- `"/`: 마지막 검색 패턴
- `":`: 마지막 명령어

= 16. 매크로

== 기록 및 재생
- `q<문자>`: 매크로 기록 시작/중지
- `@<문자>`: 매크로 실행
- `@@`: 마지막 매크로 재실행
- `<숫자>@<문자>`: 매크로 여러 번 실행

= 17. 트리시터 기능

== 구문 인식 선택
- `Alt-a`: 함수 인수 선택
- `Alt-f`: 함수 선택
- `Alt-t`: 타입 선택
- `Alt-c`: 클래스 선택
- `Alt-T`: 테스트 선택
- `Alt-m`: 주석 선택

== 구문 인식 이동
- `Alt-n`: 다음 함수로 이동
- `Alt-p`: 이전 함수로 이동
- `Alt-N`: 다음 클래스로 이동
- `Alt-P`: 이전 클래스로 이동

= 18. 설정 및 커스터마이징

== 설정 파일 위치
- Linux/macOS: `~/.config/helix/config.toml`
- Windows: `%APPDATA%\helix\config.toml`

== 주요 설정 옵션
```toml
// 테마 설정
theme = "onedark"

// 편집기 설정
[editor]
auto-completion = true
line-number = "relative"
cursorline = true
mouse = true
indent-guides.render = true

// LSP 설정
[editor.lsp]
display-messages = true

// 파일 탐색기 설정
[editor.file-picker]
hidden = false

// 키 바인딩 커스터마이징
[keys.normal]
"C-s" = ":w"
"C-c" = ["collapse_selection", "normal_mode"]
```

== OS별 추가 설정
```toml
// macOS에서 Option 키 문제 해결
[keys.normal]
"A-w" = "extend_to_word"
"A-b" = "move_prev_word_start"

// Windows에서 유니코드 지원
[editor]
shell = ["powershell", "-c"]

// Linux에서 클립보드 설정
[editor.clipboard-provider]
type = "xclip"
```

= 19. 유용한 팁

== 효율적인 편집
- 선택 우선 방식을 활용: 먼저 대상을 선택하고 나서 작업
- 다중 커서로 반복 작업 효율화
- 텍스트 객체로 정확한 선택
- 정규식을 활용한 복잡한 선택 및 교체
- LSP 기능으로 코드 탐색 및 리팩토링

== 학습 도구
- `:tutor`: 내장 튜토리얼 실행
- `Space ?`: 키 바인딩 도움말
- `:help`: 도움말 문서
